section
  section
    h1 Lazy VS Greedy
    div
      span(style='color:red') ?
  section
    div
      | Par d&eacute;faut, les quantifieurs&nbsp;
      span(style='color:green') +
      |  et&nbsp;
      span(style='color:green') *
      |  sont
      |             dit&nbsp;
      span(style='color:red') Greedy
    br
    div
      | Cela signifie qu&apos;ils vont matcher autant de caract&egrave;res que possible avant d&apos;arriver &agrave; la prochaine
      | contrainte
  section
    div
      | A l&apos;inverse, si on rend un quantifieur&nbsp;
      span(style='color:red') Lazy
      | , il s&apos;arr&ecirc;tera &agrave; la premi&egrave;re
      |             occasion
  section
    div
      | L&apos;op&eacute;rateur permettant de rendre un quantifieur&nbsp;
      span(style='color:red') lazy
      |  est&nbsp;
      span(style='color:red') ?
    br
    div
      | Exemple : /
      span(style='color:green') [
      span(style='color:blue') a
      span(style='color:red') -
      span(style='color:blue') z
      span(style='color:green') ]
      span(style='color:green') +
      span(style='color:red') ?
      span(style='color:blue') \d
      | /
  section
    | Exemple : rendez lazy l&apos;expression, et voyez le r&eacute;sultat :
    a(href='https://regex101.com/r/YNVYfP/4' target='_blank' rel='noopener noreferrer')
      img(src='./imgs/lazyGreedy.jpg')
  section
    div Exercice(s)
    br
    .simpleRowFlex
      div
        a(href='https://regex101.com/r/8Wzjzg/2' target='_blank' rel='noopener noreferrer')
          | Exercice